modClasses = [
/*
    class Mod_Example extends FirmwareMod {
        constructor() {
            super("Example Mod", "This mod does absolutely nothing and is used as an example for implementing new mods. It is hidden for convenience, not because it does anything risky.", 0); // Add name, description and size (additional flash used, 0 for most mods)
            this.hidden = true; // Set this to true for high-risk mods such as the "Enable TX everywhere" mod
            // Customize the mod-specific div with input elements
            // There is a helper function for adding input fields easily:
            this.inputField1 = addInputField(this.modSpecificDiv, "Example Mod specific input field 1", "Editable data");
        }

        apply(firmwareData) {
            log("The value of input field 1 is: " + this.inputField1.value);
            // Implement the logic to apply the specific mod here
            // You can use the mod-specific inputs in this.modSpecificDiv
            return firmwareData;
        }
    }
    ,
*/
    class Mod_APP extends FirmwareMod {
        constructor() {
            super("Приложения", "Добавляет приложение из списка на выбор:", "зависит от модификации");

            this.selectSbar = addRadioButton(this.modSpecificDiv, "S-метр (уровни по 6дБ) + вольтметр батареи в строке состояния. Отображает уровень при передаче, но перекрывает субтон при копировании частоты. By @manujedi, v9.", "selectSbar", "selectApp"); // v78
            this.selectSbarOld = addRadioButton(this.modSpecificDiv, "S-метр (уровни по 6дБ) + вольтметр батареи в строке состояния. Старая версия, не перекрывает субтон, но не отображает уровень при передаче. By @valekrus, (based on v44 by piotr022) НЕ РАБОТАЕТ.", "selectSbarOld", "selectApp"); // v44
            this.selectGraph = addRadioButton(this.modSpecificDiv, "Шкала RSSI с выводом цифрового значения. By @manujedi, v9.", "selectGraph", "selectApp");
            this.selectSpectr = addRadioButton(this.modSpecificDiv, "Спектроанализатор. Включается по кнопке фонарика. Вверх/вниз (удержание) - сменить центральную частоту, 8/2 - приблизить/отдалить, 1/7 - увеличить/уменьшить разрешение, PTT/EXIT - выход. После выхода надо зайти в меню, чтобы обновить экран. By @manujedi, v9.", "selectSpectr", "selectApp");
            this.selectSpectrM = addRadioButton(this.modSpecificDiv, "Спектроанализатор от Михаила. Включается по кнопке фонарика. Перед запуском либо выключить шумодав (SQL в 0) либо включить режим мониторинга. Вверх/вниз - смена частоты, 1/7 - чувствительность(время замера), 2/8 - шаг частоты, 9/3 - приблизить/отдалить, */F (удержание) - уровень шумодава, 5 - подсветка, 0 - удалить частоту (подавить помеху), EXIT - выход. После выхода надо зайти в меню, чтобы обновить экран. By @manujedi, v9.", "selectSpectrM", "selectApp");
            this.selectMessenger = addRadioButton(this.modSpecificDiv, "Текстовый чат. Включается по кнопке фонарика. Клавиатура для набора сообщения, MENU - отправить, EXIT - очистить, если сообщения нет - выйти. Для набора следующей буквы на той же кнопке, что и предыдущая нажать * для подтверждения. By @manujedi, v9.", "selectMessenger", "selectApp");
            this.selectPong = addRadioButton(this.modSpecificDiv, "Пинпонг. By @manujedi, v9.", "selectPong", "selectApp");
            this.selectSpectrM.checked = true;
            this.selectSbarOld.disabled = true;
        }


        apply(firmwareData) {

            const dataSbar = hexString
            const dataSbarOld = hexStringv44
            const dataGraph = hexString
            const dataSpectr = hexString
            const dataSpectrM = hexString
            const dataMessenger = hexString
            const dataPong = hexString
            const offset = 0xe548;

            if (this.selectSbar.checked) {
                firmwareData = replaceSection(firmwareData, hexString("6DE6000002000000030000000400000005000000060000000700000008000000090000000A0000000B0000000C0000000D0000000E00000055E7"), 0x0004);
                firmwareData = replaceSection(firmwareData, dataSbar, offset);

                log(`Успешно применён: ${this.name}. Добавлен S-метр. Использовано ${dataSbar.length/2} байт(а) дополнительно.`);
            }
            if (this.selectSbarOld.checked) {
                firmwareData = replaceSection(firmwareData, hexString("35E8000002000000030000000400000005000000060000000700000008000000090000000A0000000B0000000C0000000D0000000E0000005DEC"), 0x0004); //v44
                firmwareData = replaceSection(firmwareData, dataSbarOld, firmwareData.length);

                log(`Успешно применён: ${this.name}. Добавлен S-метр v44. Использовано ${dataSbar.length/2} байт(а) дополнительно.`);
            }
            else if (this.selectGraph.checked) {
                firmwareData = replaceSection(firmwareData, hexString("11E7000002000000030000000400000005000000060000000700000008000000090000000A0000000B0000000C0000000D0000000E00000001E9"), 0x0004);
                firmwareData = replaceSection(firmwareData, dataGraph, offset);

                log(`Успешно применён: ${this.name}. Добавлена шкала. Использовано ${dataGraph.length/2} байт(а) дополнительно.`);
            }
            else if (this.selectSpectr.checked) {
                firmwareData = replaceSection(firmwareData, hexString("F5E9000002000000030000000400000005000000060000000700000008000000090000000A0000000B0000000C0000000D0000000E000000F5E6"), 0x0004);
                firmwareData = replaceSection(firmwareData, dataSpectr, offset);

                log(`Успешно применён: ${this.name}. Добавлен спектроанализатор. Использовано ${dataSpectr.length/2} байт(а) дополнительно.`);
            }
            else if (this.selectSpectrM.checked) {
                firmwareData = replaceSection(firmwareData, hexString("E1ED000002000000030000000400000005000000060000000700000008000000090000000A0000000B0000000C0000000D0000000E00000085E7"), 0x0004);
                firmwareData = replaceSection(firmwareData, dataSpectrM, offset);

                log(`Успешно применён: ${this.name}. Добавлен спектроанализатор от Михаила. Использовано ${dataSpectrM.length/2} байт(а) дополнительно.`);
            }
            else if (this.selectMessenger.checked) {
                firmwareData = replaceSection(firmwareData, hexString("31EB000002000000030000000400000005000000060000000700000008000000090000000A0000000B0000000C0000000D0000000E000000DDE5"), 0x0004);
                firmwareData = replaceSection(firmwareData, dataMessenger, offset);

                log(`Успешно применён: ${this.name}. Добавлен чат. Использовано ${dataMessenger.length/2} байт(а) дополнительно.`);
            }
            else if (this.selectPong.checked) {
                firmwareData = replaceSection(firmwareData, hexString("11E7000002000000030000000400000005000000060000000700000008000000090000000A0000000B0000000C0000000D0000000E00000071E9"), 0x0004);
                firmwareData = replaceSection(firmwareData, dataPong, offset);

                log(`Успешно применён: ${this.name}. Добавлен пинпонг. Использовано ${dataPong.length/2} байт(а) дополнительно.`);
            }

            return firmwareData;
        }
    }
    ,
    class Mod_APP_Advanced extends FirmwareMod {
        constructor() {
            super("Приложения (дополнительно)", "ВАЖНО! Только одно приложение может быть установлено - либо из этого мода с приложениями, либо из первого. Добавляет приложение из списка на выбор:", "зависит от модификации");
            this.hidden = true;

            this.selectAMTX = addRadioButton(this.modSpecificDiv, "AM TX. Передаёт только тон ~1.9 кГц. Для тестирования. By @manujedi, v9-git.", "selectAMTX", "selectApp");
        }

        apply(firmwareData) {
            const dataAMTX = hexString("0448054B10B5834203D0044B002B00D0984710BD8C1300208C1300200000000006480749091A8B10C90FC91810B5491003D0044B002B00D0984710BD8C1300208C1300200000000010B5074C2378002B09D1FFF7D5FF054B002B02D0044800E000BF0123237010BD8C13002000000000C0000000054B10B5002B03D00449054800E000BFFFF7CCFF10BDC0460000000090130020C000000070B50C4D0C4E761BB61005D0002408CD01349847A642FAD100F070FA074D084E761BB61005D0002408CD01349847A642FAD170BDF4EA0000F4EA0000F4EA0000FCEA0000F0B5C64600B50F2A41D903270D003E0005430C0003002E402F423DD11500103D2D09A8462D01AC46844427681D001F6067685F60A7689F60E7681034DF6010336545F2D145460F230C2401352D01491913404519144222D08C59AC5104369C1B032CF9D8043B9B0801339B00ED18C91803231A40561E002A06D00023CC5C1A00EC5401339642F9D180BCB846F0BD0500561E002AF1D1F7E70500561EEDE71A00F6E7C046F0B50500830749D0541E002A45D003000326CAB202E00135013C3ED301332A703342F8D1032C30D9FF220A40150215432A0415430F2C34D92700103F3F093E01B4461E001A0010366644156055609560D5601032B242F8D101373F01DB190F270C22274022403C00002A0ED03E1FB608B400A4461A001C1D644420C2A242FCD103240136B6009B193C40002C05D0C9B21C19197001339C42FBD1F0BD03001400C0E72700E2E7C046704770470822F8B51B4E040033680D00007A13422DD0012193433360174B053A41401A7021721ED0022200211448FFF793FF144B0C22180013491F00FFF73AFF002239780132C943D2B2397001370E2AF7D133689B060AD4012323762B681A6862601C6003E00E220648FFF775FF012001E00028D8D1F8BD00100640B303002090060020840600204FD40000F0B50A7A0823150004000E0089B01D401A4270D13020FCF7B9F880076BD5237E002B12D025764020FCF7B0F8334901404020FCF77BFB3920FCF7A8F805003820FCF7A4F82D04054365616420FCF79EF80A21638982B29B1AA28123616281694402A8FBF7A1FA6B46002508271A89244903A8FDF74FFF2B007F22290003A801950097F9F779FF6B461E495A8903A8FDF741FF022303A87F22290001950097F9F76BFF194B02201B689B0625D564693730210CFCF73BFBA1B23820FCF737FB3020FCF764F8040029003020FCF72FFB21003020FCF72BFB4020FCF758F88021490101434020FCF722FB32681368AB4202D0596811605D60002009B0F0BDFFEFFFFFA4EA0000B2EA00000010064010B5F1F7E3FB10BDC168F8B501310400C160C72927D93223324DFF33E85C0122FF3843425841237C93430343100023742D4B1B689843C3002C48285C04258000284003432A480068400A8243AA401C201343227C824313432374490704D000256668AE4208D1F8BD23681868002821D166680500002EF6D0237C1B0711D4FCF7ABFB227EC7B297420BD061694868FF2A22D1002804D03A00036808319B68984727762100336830001B68083198470543EDB208E02100036808315B68984766680500002ED8D1AB0701D5FCF745FEED07C9D5FCF77DFEC6E70028E1D003680831DB68DCE704070020001006401A0300000008064010B5084C2378002B05D100F035F8FFF7E9FD012323700448FFF77CFFFDF7D2FC10BDC046A8130020AC13002000230C4A0C491360136153600B4A1160936093811361536113760949094A116009495360D3601374FF339160526113767047C046E4130020C8EA0000C8130020D8EA0000AC130020B0130020074B0849002210B50748994203D803331A1A920892000549FFF7CAFD10BDC0468C130020891300208C13002000EB0000696E20313A202530356920202000696E20323A2025303569202020000000000000000000FDE7000075E7000071E7000073E70000C8130020F8B5C046F8BC08BC9E467047F8B5C046F8BC08BC9E467047BDE5000029EA000091E50000");
            const offset = 0xe548;

            if (this.selectAMTX.checked) {
                firmwareData = replaceSection(firmwareData, hexString("09E9000002000000030000000400000005000000060000000700000008000000090000000A0000000B0000000C0000000D0000000E000000FDE9"), 0x0004);
                firmwareData = replaceSection(firmwareData, dataAMTX, offset);

                log(`Успешно применён: ${this.name}. Добавлен AM TX. Использовано ${dataAMTX.length/2} байт(а) дополнительно.`);
            }

            return firmwareData;
        }
    }
    ,
    class Mod_BatteryIcon extends FirmwareMod {
        constructor() {
            super("Значок батареи", "Исправляет иконку заряда батареи.", 0);
        }

        apply(firmwareData) {
            const offset = 0xD370 + 134;
            const oldData = hexString("3e227f4141414141414141414141414163003e227f415d5d4141414141414141414163003e227f415d5d415d5d4141414141414163003e227f415d5d415d5d415d5d4141414163003e227f415d5d415d5d415d5d415d5d4163");
            const newData = hexString("3e2263414141414141414141414141417f003e2263414141414141414141415d5d4163003e2263414141414141415d5d415d5d417f003e2263414141415d5d415d5d415d5d417f003e2263415d5d415d5d415d5d415d5d417f");
            if (compareSection(firmwareData, oldData, offset)) {
                firmwareData = replaceSection(firmwareData, newData, offset);
                log(`Успешно применён: ${this.name}.`);
            }
            else {
                log(`Ошибка применения ${this.name}: Неожиданные данные! Патч либо уже был применён, либо несовместимая версия прошивки.`);
            }

            return firmwareData;
        }
    }
    ,
    class Mod_ChangeContrast extends FirmwareMod {
        constructor() {
            super("Контраст LCD", "Изменяет контраст LCD на любое значение от 0 до 63 (больше - темнее). Значение по умолчанию 31", 0);

            //this.contrastValue = addInputField(this.modSpecificDiv, ["Новое значение контраста, в диапазоне 0-63:"], "31");
            const contrastValueDiv = document.createElement("div");
            contrastValueDiv.classList.add("form-group");
            this.contrastValueInput = document.createElement("input");
            //this.contrastValueInput.id = "contrastValue";
            this.contrastValueInput.className = "form-control-range";
            this.contrastValueInput.type = "range";
            this.contrastValueInput.min = "0";
            this.contrastValueInput.max = "63";
            this.contrastValueInput.value = "31";
            this.contrastValueLabel = document.createElement("label");
            this.contrastValueLabel.innerText = "Новое значение контраста:";
            this.contrastValueText = document.createElement("span");
            this.contrastValueText.id = "contrastValueText";
            this.contrastValueText.innerText = this.contrastValueInput.value;
            contrastValueDiv.appendChild(this.contrastValueLabel);
            contrastValueDiv.appendChild(this.contrastValueInput);
            contrastValueDiv.appendChild(this.contrastValueText);
            this.modSpecificDiv.appendChild(contrastValueDiv);

            this.contrastValueInput.oninput = () => {
                this.contrastValueText.innerText = this.contrastValueInput.value;
            }
        }

        apply(firmwareData) {
            const offset = 0xb7d8;
            const minValue = 0;
            const maxValue = 63;
            const inputValue = parseInt(this.contrastValueInput.value);

            if (!isNaN(inputValue) && inputValue >= minValue && inputValue <= maxValue) {
                const newData = new Uint8Array([inputValue]);
                firmwareData = replaceSection(firmwareData, newData, offset);
                log(`Успешно применён: ${this.name}.`);
            }
            else {
                log(`Ошибка применения ${this.name}: Значение контраста должно быть числом в диапазоне 0-63!`);
            }
            return firmwareData;
        }
    }
    ,
    class Mod_NegativeDisplay extends FirmwareMod {
        constructor() {
            super("Экран в негативе", "Инвертирует цвета экрана.", 0);
        }

        apply(firmwareData) {
            const offset = 0xb7c0;
            const oldData = hexString("a6");
            const newData = hexString("a7");
            if (compareSection(firmwareData, oldData, offset)) {
                firmwareData = replaceSection(firmwareData, newData, offset);
                log(`Успешно применён: ${this.name}.`);
            }
            else {
                log(`Ошибка применения ${this.name}: Неожиданные данные! Патч либо уже был применён, либо несовместимая версия прошивки.`);
            }

            return firmwareData;
        }
    }
    ,
    class Mod_FontBigDigits extends FirmwareMod {
        constructor() {
            super("Модифицированный шрифт (большие цифры)", "Заменяет шрифт на один из выбранных: ", 0);

            const fontPreviewDiv = document.createElement("div");
            fontPreviewDiv.classList.add("mt-2");
            this.previewCanvas = document.createElement("canvas");
            this.previewCanvas.classList.add("mr-3", "border", "shadow-sm");
            this.previewCanvas.width = 143;
            this.previewCanvas.height = 16;
            fontPreviewDiv.appendChild(this.previewCanvas);
            this.modSpecificDiv.appendChild(fontPreviewDiv);

            this.selectVCR = addRadioButton(this.modSpecificDiv, "Шрифт как в старых видеомагнитофонах/телевизорах", "selectVCRBigDigits", "selectFontBigDigits");
            this.selectVCR.value
            this.selectFuturistic = addRadioButton(this.modSpecificDiv, "Футуристичный шрифт (от DO7OO)", "selectFuturisticBigDigits", "selectFontBigDigits");
            this.selectFuturistic.value
            this.selectTerminus = addRadioButton(this.modSpecificDiv, "Шрифт Terminus от @mbg", "selectTerminusBigDigits", "selectFontBigDigits");
            this.selectTerminus.value
            this.selectCustom = addRadioButton(this.modSpecificDiv, "Свой шрифт", "selectCustomBigDigits", "selectFontBigDigits");
            this.selectCustom.value

            const customFontCardDiv = document.createElement("div");
            customFontCardDiv.classList.add("d-none", "card", "md-3");

            const customFontDiv = document.createElement("div");
            customFontDiv.classList.add("card-body");

            const explanationCustomFontFile = document.createElement("p");
            explanationCustomFontFile.innerText = "Выберите файл изображения со шрифтом, размер картинки в идеале 143 на 16 пикселей. Если у вас нет картинки - можете воспользоваться полем для ввода шестнадцатиричного кода шрифта вручную.";
            customFontDiv.appendChild(explanationCustomFontFile);

            const fileInputDiv = document.createElement("div");
            fileInputDiv.classList.add("custom-file", "mt-2");
            this.customFileInput = document.createElement("input");
            this.customFileInput.className = "custom-file-input";
            this.customFileInput.type = "file";
            this.customFileInput.accept = "image/bmp,image/jpeg,image/png";
            this.customFileLabel = document.createElement("label");
            this.customFileLabel.className = "custom-file-label";
            this.customFileLabel.dataset.browse = "Обзор";
            this.customFileLabel.innerText = "Выберите картинку";
            this.customFileLabel.for = "customFileInput";
            fileInputDiv.appendChild(this.customFileInput);
            fileInputDiv.appendChild(this.customFileLabel);
            this.canvas = document.createElement("canvas");
            this.canvas.classList.add("mt-3", "mr-3", "border", "shadow-sm");
            this.canvas.width = 143;
            this.canvas.height = 16;
            this.canvas2 = this.canvas.cloneNode();
            fileInputDiv.appendChild(this.canvas);
            fileInputDiv.appendChild(this.canvas2);
            customFontDiv.appendChild(fileInputDiv);

            const explanationCustomFontText = document.createElement("p");
            explanationCustomFontText.innerText = "Итоговый код шрифта в виде шестнадцатиричной строки. По умолчанию здесь код стандартного шрифта. При ручной вставке символы \"\\x\", при наличии, будут удалены автоматически.";
            customFontDiv.appendChild(explanationCustomFontText);

            this.customFontData = document.createElement("textarea");
            this.customFontData.classList.add("w-100", "form-control");
            this.customFontData.rows = 8;
            // this.customFontData.maxLength = 572;
            this.customFontData.placeholder = "Тут должен быть шестнадцатиричный код шрифта, перезагрузите страницу, чтобы сбросить!";
            this.customFontData.value = this.selectCustom.value;
            customFontDiv.appendChild(this.customFontData);

            customFontCardDiv.appendChild(customFontDiv);
            this.modSpecificDiv.appendChild(customFontCardDiv);

            this.customFileInput.addEventListener("change", (event) => {
                const file = this.customFileInput.files[0];
                this.customFileLabel.textContent = file.name;
                const reader = new FileReader();
                reader.onload = () => {
                    const img = new Image();
                    img.onload = () => {
                        const canvas = this.canvas;
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
                        function getPixel(x, y) {
                            const index = y * canvas.width + x;
                            const i = index * 4;
                            return imageData[i] + imageData[i + 1] + imageData[i + 2] > 128 * 3 ? 0 : 1;
                        }

                        // run canvas content through getPixel and output to canvas2
                        const canvas2 = this.canvas2;
                        const ctx2 = canvas2.getContext('2d');
                        const imageData2 = ctx2.getImageData(0, 0, canvas2.width, canvas2.height);
                        for (let y = 0; y < canvas2.height; y++) {
                            for (let x = 0; x < canvas2.width; x++) {
                                const index = y * canvas2.width + x;
                                const i = index * 4;
                                const pixel = !getPixel(x, y);
                                imageData2.data[i] = pixel * 255;
                                imageData2.data[i + 1] = pixel * 255;
                                imageData2.data[i + 2] = pixel * 255;
                                imageData2.data[i + 3] = 255;
                            }
                        }
                        ctx2.putImageData(imageData2, 0, 0);

                        const outputArray = new Uint8Array((canvas2.width * canvas2.height)/8);

                        let j = 0;
                        for (let xs = 0; xs < canvas2.width; xs += 13) {
                            let y = 0;
                            for (let x = xs; x < (xs + 13); x++) {
                                let byte = 0;
                                for (let i = 0; i < 8; i++) {
                                    byte |= getPixel(x, y + i) << i;
                                }
                                outputArray[j++] = byte;
                            }
                            y = 8;
                            for (let x = xs; x < (xs + 13); x++) {
                                let byte = 0;
                                for (let i = 0; i < 8; i++) {
                                    byte |= getPixel(x, y + i) << i;
                                }
                                outputArray[j++] = byte;
                            }
                        }

                        this.customFontData.value = uint8ArrayToHexString(outputArray).toUpperCase();
                        this.selectCustom.value = this.customFontData.value;
			            drawFont(this.previewCanvas, font8to16(hexString(this.selectCustom.value), 13));
                    };
                    img.src = reader.result;
                };
                reader.readAsDataURL(file);
            });

            this.customFontData.addEventListener("input", (event) => {
                const reg = /\\x/g;
                this.selectCustom.value = event.target.value.replace(reg, "");
                event.target.value = this.selectCustom.value;
			    drawFont(this.previewCanvas, font8to16(hexString(this.selectCustom.value), 13));
            });
            this.selectCustom.parentElement.parentElement.addEventListener("change", (event) => {
                customFontCardDiv.classList.toggle("d-none", !this.selectCustom.checked);
			    if (event.target.name == "selectFontBigDigits") {
			        drawFont(this.previewCanvas, font8to16(hexString(event.target.value), 13));
				}
            });
            this.selectTerminus.checked = true;
            drawFont(this.previewCanvas, font8to16(hexString(this.selectTerminus.value), 13));

        }

        apply(firmwareData) {
            const offset = 0xd52a;

            if (this.selectVCR.checked) {
                firmwareData = replaceSection(firmwareData, hexString(this.selectVCR.value), offset);
            }
            else if (this.selectFuturistic.checked) {
                firmwareData = replaceSection(firmwareData, hexString(this.selectFuturistic.value), offset);
            }
            else if (this.selectTerminus.checked) {
                firmwareData = replaceSection(firmwareData, hexString(this.selectTerminus.value), offset);
            }
            else if (this.selectCustom.checked) {
                firmwareData = replaceSection(firmwareData, hexString(this.selectCustom.value), offset);
            }

            log(`Успешно применён: ${this.name}.`);
            return firmwareData;
        }
    }
    ,
    class Mod_FontSmallDigits extends FirmwareMod {
        constructor() {
            super("Модифицированный шрифт (маленькие цифры)", "Заменяет шрифт на один из выбранных: ", 0);

            const fontPreviewDiv = document.createElement("div");
            fontPreviewDiv.classList.add("mt-2");
            this.previewCanvas = document.createElement("canvas");
            this.previewCanvas.classList.add("mr-3", "border", "shadow-sm");
            this.previewCanvas.width = 84;
            this.previewCanvas.height = 8;
            fontPreviewDiv.appendChild(this.previewCanvas);
            this.modSpecificDiv.appendChild(fontPreviewDiv);

            this.selectFuturistic = addRadioButton(this.modSpecificDiv, "Футуристичный шрифт (от DO7OO)", "selectFuturisticSmallDigits", "selectFontSmallDigits");
            this.selectFuturistic.value = "007E414141797F00000000787F000079794949494E0049494949797E0007080808787F004E4949497979007E79494949790001010101797E007E494949797F000E090909797F0008080808080000000000000000";
            this.selectTerminus = addRadioButton(this.modSpecificDiv, "Шрифт Terminus от @mbg", "selectTerminusSmallDigits", "selectFontSmallDigits");
            this.selectTerminus.value = "003E5149453E000000427F400000004661514946000022414949360000181412117F0000274545453900003E45454538000001016119070000364949493600000E5151513E000808080808000000000000000000";
            this.selectCustom = addRadioButton(this.modSpecificDiv, "Свой шрифт", "selectCustomSmallDigits", "selectFontSmallDigits");
            this.selectCustom.value = "003E414141413E0000427F4000000062515149494600224149494D3200181412117F1000274545454539003E494949493000017109050300003649494949360046494949291E0008080808080000000000000000";

            const customFontCardDiv = document.createElement("div");
            customFontCardDiv.classList.add("d-none", "card", "md-3");

            const customFontDiv = document.createElement("div");
            customFontDiv.classList.add("card-body");

            const explanationCustomFontFile = document.createElement("p");
            explanationCustomFontFile.innerText = "Выберите файл изображения со шрифтом, размер картинки в идеале 84 на 8 пикселей. Если у вас нет картинки - можете воспользоваться полем для ввода шестнадцатиричного кода шрифта вручную.";
            customFontDiv.appendChild(explanationCustomFontFile);

            const fileInputDiv = document.createElement("div");
            fileInputDiv.classList.add("custom-file", "mt-2");
            this.customFileInput = document.createElement("input");
            this.customFileInput.className = "custom-file-input";
            this.customFileInput.type = "file";
            this.customFileInput.accept = "image/bmp,image/jpeg,image/png";
            this.customFileLabel = document.createElement("label");
            this.customFileLabel.className = "custom-file-label";
            this.customFileLabel.dataset.browse = "Обзор";
            this.customFileLabel.innerText = "Выберите картинку";
            this.customFileLabel.for = "customFileInput";
            fileInputDiv.appendChild(this.customFileInput);
            fileInputDiv.appendChild(this.customFileLabel);
            this.canvas = document.createElement("canvas");
            this.canvas.classList.add("mt-3", "mr-3", "border", "shadow-sm");
            this.canvas.width = 84;
            this.canvas.height = 8;
            this.canvas2 = this.canvas.cloneNode();
            fileInputDiv.appendChild(this.canvas);
            fileInputDiv.appendChild(this.canvas2);
            customFontDiv.appendChild(fileInputDiv);

            const explanationCustomFontText = document.createElement("p");
            explanationCustomFontText.innerText = "Итоговый код шрифта в виде шестнадцатиричной строки. По умолчанию здесь код стандартного шрифта. При ручной вставке символы \"\\x\", при наличии, будут удалены автоматически.";
            customFontDiv.appendChild(explanationCustomFontText);

            this.customFontData = document.createElement("textarea");
            this.customFontData.classList.add("w-100", "form-control");
            this.customFontData.rows = 3;
            // this.customFontData.maxLength = 168;
            this.customFontData.placeholder = "Тут должен быть шестнадцатиричный код шрифта, перезагрузите страницу, чтобы сбросить!";
            this.customFontData.value = this.selectCustom.value;
            customFontDiv.appendChild(this.customFontData);

            customFontCardDiv.appendChild(customFontDiv);
            this.modSpecificDiv.appendChild(customFontCardDiv);

            this.customFileInput.addEventListener("change", (event) => {
                const file = this.customFileInput.files[0];
                this.customFileLabel.textContent = file.name;
                const reader = new FileReader();
                reader.onload = () => {
                    const img = new Image();
                    img.onload = () => {
                        const canvas = this.canvas;
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
                        function getPixel(x, y) {
                            const index = y * canvas.width + x;
                            const i = index * 4;
                            return imageData[i] + imageData[i + 1] + imageData[i + 2] > 128 * 3 ? 0 : 1;
                        }

                        // run canvas content through getPixel and output to canvas2
                        const canvas2 = this.canvas2;
                        const ctx2 = canvas2.getContext('2d');
                        const imageData2 = ctx2.getImageData(0, 0, canvas2.width, canvas2.height);
                        for (let y = 0; y < canvas2.height; y++) {
                            for (let x = 0; x < canvas2.width; x++) {
                                const index = y * canvas2.width + x;
                                const i = index * 4;
                                const pixel = !getPixel(x, y);
                                imageData2.data[i] = pixel * 255;
                                imageData2.data[i + 1] = pixel * 255;
                                imageData2.data[i + 2] = pixel * 255;
                                imageData2.data[i + 3] = 255;
                            }
                        }
                        ctx2.putImageData(imageData2, 0, 0);

                        const outputArray = new Uint8Array((canvas2.width * canvas2.height)/8);

                        let j = 0;
                        for (let x = 0; x < canvas2.width; x++) {
                            let byte = 0;
                            for (let i = 0; i < 8; i++) {
                                byte |= getPixel(x, i) << i;
                            }
                            outputArray[j++] = byte;
                        }

                        this.customFontData.value = uint8ArrayToHexString(outputArray).toUpperCase();
                        this.selectCustom.value = this.customFontData.value;
			            drawFont(this.previewCanvas, hexString(this.selectCustom.value));
                    };
                    img.src = reader.result;
                };
                reader.readAsDataURL(file);
            });

            this.customFontData.addEventListener("input", (event) => {
                const reg = /\\x/g;
                this.selectCustom.value = event.target.value.replace(reg, "");
                event.target.value = this.selectCustom.value;
			    drawFont(this.previewCanvas, hexString(this.selectCustom.value));
            });
            this.selectCustom.parentElement.parentElement.addEventListener("change", (event) => {
                customFontCardDiv.classList.toggle("d-none", !this.selectCustom.checked);
			    if (event.target.name == "selectFontSmallDigits") {
			        drawFont(this.previewCanvas, hexString(event.target.value));
				}
            });
            this.selectTerminus.checked = true;
            drawFont(this.previewCanvas, hexString(this.selectTerminus.value));
        }

        apply(firmwareData) {
            const offset = 0xd648;

            if (this.selectFuturistic.checked) {
                firmwareData = replaceSection(firmwareData, hexString(this.selectFuturistic.value), offset);
            }
            else if (this.selectTerminus.checked) {
                firmwareData = replaceSection(firmwareData, hexString(this.selectTerminus.value), offset);
            }
            else if (this.selectCustom.checked) {
                firmwareData = replaceSection(firmwareData, hexString(this.selectCustom.value), offset);
            }

            log(`Успешно применён: ${this.name}.`);
            return firmwareData;
        }
    }
    ,
    class Mod_FontLetters extends FirmwareMod {
        constructor() {
            super("Модифицированный шрифт (буквы)", "Заменяет шрифт на один из выбранных: ", 0);

            const fontPreviewDiv = document.createElement("div");
            fontPreviewDiv.classList.add("mt-2");
            this.previewCanvas = document.createElement("canvas");
            this.previewCanvas.classList.add("mr-3", "border", "shadow-sm");
            this.previewCanvas.width = 760;
            this.previewCanvas.height = 16;
            fontPreviewDiv.appendChild(this.previewCanvas);
            this.modSpecificDiv.appendChild(fontPreviewDiv);

            this.selectTunas1337 = addRadioButton(this.modSpecificDiv, "Шрифт от Tunas1337", "selectTunas1337Letters", "selectFontLetters");
			this.selectTunas1337.value
            this.selectTerminus = addRadioButton(this.modSpecificDiv, "Шрифт Terminus от @mbg", "selectTerminusLetters", "selectFontLetters");
			this.selectTerminus.value
            this.selectCustom = addRadioButton(this.modSpecificDiv, "Свой шрифт", "selectCustomLetters", "selectFontLetters");
            this.selectCustom.value

            const customFontCardDiv = document.createElement("div");
            customFontCardDiv.classList.add("d-none", "card", "md-3");

            const customFontDiv = document.createElement("div");
            customFontDiv.classList.add("card-body");

            const explanationCustomFontFile = document.createElement("p");
            explanationCustomFontFile.innerText = "Выберите файл изображения со шрифтом, размер картинки в идеале 760 на 16 пикселей. Если у вас нет картинки - можете воспользоваться полем для ввода шестнадцатиричного кода шрифта вручную.";
            customFontDiv.appendChild(explanationCustomFontFile);

            const fileInputDiv = document.createElement("div");
            fileInputDiv.classList.add("custom-file", "mt-2");
            this.customFileInput = document.createElement("input");
            this.customFileInput.className = "custom-file-input";
            this.customFileInput.type = "file";
            this.customFileInput.accept = "image/bmp,image/jpeg,image/png";
            this.customFileLabel = document.createElement("label");
            this.customFileLabel.className = "custom-file-label";
            this.customFileLabel.dataset.browse = "Обзор";
            this.customFileLabel.innerText = "Выберите картинку";
            this.customFileLabel.for = "customFileInput";
            fileInputDiv.appendChild(this.customFileInput);
            fileInputDiv.appendChild(this.customFileLabel);
            this.canvas = document.createElement("canvas");
            this.canvas.classList.add("mt-3", "mr-3", "border", "shadow-sm");
            this.canvas.width = 760;
            this.canvas.height = 16;
            this.canvas2 = this.canvas.cloneNode();
            fileInputDiv.appendChild(this.canvas);
            fileInputDiv.appendChild(this.canvas2);
            customFontDiv.appendChild(fileInputDiv);

            const explanationCustomFontText = document.createElement("p");
            explanationCustomFontText.innerText = "Итоговый код шрифта в виде шестнадцатиричной строки. По умолчанию здесь код стандартного шрифта. При ручной вставке символы \"\\x\", при наличии, будут удалены автоматически.";
            customFontDiv.appendChild(explanationCustomFontText);

            this.customFontData = document.createElement("textarea");
            this.customFontData.classList.add("w-100", "form-control");
            this.customFontData.rows = 8;
            // this.customFontData.maxLength = 3040;
            this.customFontData.placeholder = "Тут должен быть шестнадцатиричный код шрифта, перезагрузите страницу, чтобы сбросить!";
            this.customFontData.value = this.selectCustom.value;
            customFontDiv.appendChild(this.customFontData);

            customFontCardDiv.appendChild(customFontDiv);
            this.modSpecificDiv.appendChild(customFontCardDiv);

            this.customFileInput.addEventListener("change", (event) => {
                const file = this.customFileInput.files[0];
                this.customFileLabel.textContent = file.name;
                const reader = new FileReader();
                reader.onload = () => {
                    const img = new Image();
                    img.onload = () => {
                        const canvas = this.canvas;
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
                        function getPixel(x, y) {
                            const index = y * canvas.width + x;
                            const i = index * 4;
                            return imageData[i] + imageData[i + 1] + imageData[i + 2] > 128 * 3 ? 0 : 1;
                        }

                        // run canvas content through getPixel and output to canvas2
                        const canvas2 = this.canvas2;
                        const ctx2 = canvas2.getContext('2d');
                        const imageData2 = ctx2.getImageData(0, 0, canvas2.width, canvas2.height);
                        for (let y = 0; y < canvas2.height; y++) {
                            for (let x = 0; x < canvas2.width; x++) {
                                const index = y * canvas2.width + x;
                                const i = index * 4;
                                const pixel = !getPixel(x, y);
                                imageData2.data[i] = pixel * 255;
                                imageData2.data[i + 1] = pixel * 255;
                                imageData2.data[i + 2] = pixel * 255;
                                imageData2.data[i + 3] = 255;
                            }
                        }
                        ctx2.putImageData(imageData2, 0, 0);

                        const outputArray = new Uint8Array((canvas2.width * canvas2.height)/8);

                        let j = 0;
                        for (let xs = 0; xs < canvas2.width; xs += 8) {
                            let y = 0;
                            for (let x = xs; x < (xs + 8); x++) {
                                let byte = 0;
                                for (let i = 0; i < 8; i++) {
                                    byte |= getPixel(x, y + i) << i;
                                }
                                outputArray[j++] = byte;
                            }
                            y = 8;
                            for (let x = xs; x < (xs + 8); x++) {
                                let byte = 0;
                                for (let i = 0; i < 8; i++) {
                                    byte |= getPixel(x, y + i) << i;
                                }
                                outputArray[j++] = byte;
                            }
                        }

                        this.customFontData.value = uint8ArrayToHexString(outputArray).toUpperCase();
                        this.selectCustom.value = this.customFontData.value;
			            drawFont(this.previewCanvas, font8to16(hexString(this.selectCustom.value), 8));
                    };
                    img.src = reader.result;
                };
                reader.readAsDataURL(file);
            });

            this.customFontData.addEventListener("input", (event) => {
                const reg = /\\x/g;
                this.selectCustom.value = event.target.value.replace(reg, "");
                event.target.value = this.selectCustom.value;
			    drawFont(this.previewCanvas, font8to16(hexString(this.selectCustom.value), 8));
            });
            this.selectCustom.parentElement.parentElement.addEventListener("change", (event) => {
                customFontCardDiv.classList.toggle("d-none", !this.selectCustom.checked);
			    if (event.target.name == "selectFontLetters") {
			        drawFont(this.previewCanvas, font8to16(hexString(event.target.value), 8));
				}
            });
            this.selectTerminus.checked = true;
            drawFont(this.previewCanvas, font8to16(hexString(this.selectTerminus.value), 8));

        }

        apply(firmwareData) {
            const offset = 0xd695;

            if (this.selectTunas1337.checked) {
                firmwareData = replaceSection(firmwareData, hexString(this.selectTunas1337.value), offset);
            }
            else if (this.selectTerminus.checked) {
                firmwareData = replaceSection(firmwareData, hexString(this.selectTerminus.value), offset);
            }
            else if (this.selectCustom.checked) {
                firmwareData = replaceSection(firmwareData, hexString(this.selectCustom.value), offset);
            }

            log(`Успешно применён: ${this.name}.`);
            return firmwareData;
        }
    }
    ,
    class Mod_CustomBootscreen extends FirmwareMod {
        constructor() {
            super("Свой логотип", "Заменяет логотип, который отображается 2 секунды при включении рации. Настройка текста при включении в меню игнорируется, логотип отображается всегда. Картинки автоматически урезаются по пустому месту сверху и снизу. Делайте узкий логотип, если необходимо сэкономить место.", "до 1024");

            this.selectTrollface = addRadioButton(this.modSpecificDiv, "Троллфейс (933 Байта)", "selectTrollface", "selectBootscreen");
            this.selectQ = addRadioButton(this.modSpecificDiv, "Лого Quansheng Q (929 Байт)", "selectQ", "selectBootscreen");
            this.selectUVMOD = addRadioButton(this.modSpecificDiv, "Логотип UVMOD (214 Байт)", "selectUVMOD", "selectBootscreen");
            this.selectNOKIA = addRadioButton(this.modSpecificDiv, "Логотип NOKIA (507 Байт)", "selectNOKIA", "selectBootscreen");
            this.selectSuperMarioBros = addRadioButton(this.modSpecificDiv, "Логотип Super Mario (943 Байта)", "selectSuperMarioBros", "selectBootscreen");
            this.selectCustomFile = addRadioButton(this.modSpecificDiv, "Собственная картинка (будет сконвертирована и обрезана автоматически, идеальный размер 128x64)", "selectCustom", "selectBootscreen");
            this.selectTrollface.checked = true;

            const fileInputDiv = document.createElement("div");
            fileInputDiv.classList.add("custom-file", "mt-2", "d-none");
            this.customFileInput = document.createElement("input");
            this.customFileInput.className = "custom-file-input";
            this.customFileInput.type = "file";
            this.customFileInput.accept = "image/bmp,image/jpeg,image/png";
            this.customFileLabel = document.createElement("label");
            this.customFileLabel.className = "custom-file-label";
            this.customFileLabel.dataset.browse = "Обзор";
            this.customFileLabel.innerText = "Выберите картинку";
            this.customFileLabel.for = "customFileInput";
            fileInputDiv.appendChild(this.customFileInput);
            fileInputDiv.appendChild(this.customFileLabel);
            this.canvas = document.createElement("canvas");
            this.canvas.classList.add("mt-3", "mr-3", "border", "shadow-sm");
            this.canvas.width = 128;
            this.canvas.height = 64;
            this.canvas2 = this.canvas.cloneNode();
            fileInputDiv.appendChild(this.canvas);
            fileInputDiv.appendChild(this.canvas2);
            this.modSpecificDiv.appendChild(fileInputDiv);

            this.selectCustomFile.parentElement.parentElement.addEventListener("change", () => {
                fileInputDiv.classList.toggle("d-none", !this.selectCustomFile.checked);
            });



            this.customImageData = new Uint8Array(1024);
            this.customFileInput.onchange = () => {
                const file = this.customFileInput.files[0];
                this.customFileLabel.textContent = file.name;
                const reader = new FileReader();
                reader.onload = () => {
                    const img = new Image();
                    img.onload = () => {
                        const canvas = this.canvas;
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0, 128, 64);
                        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
                        function getPixel(x, y) {
                            const index = y * 128 + x;
                            const i = index * 4;
                            return imageData[i] + imageData[i + 1] + imageData[i + 2] > 128 * 3 ? 0 : 1;
                        }

                        // run canvas content through getPixel and output to canvas2
                        const canvas2 = this.canvas2;
                        const ctx2 = canvas2.getContext('2d');
                        const imageData2 = ctx2.getImageData(0, 0, canvas2.width, canvas2.height);
                        for (let y = 0; y < 64; y++) {
                            for (let x = 0; x < 128; x++) {
                                const index = y * 128 + x;
                                const i = index * 4;
                                const pixel = !getPixel(x, y);
                                imageData2.data[i] = pixel * 255;
                                imageData2.data[i + 1] = pixel * 255;
                                imageData2.data[i + 2] = pixel * 255;
                                imageData2.data[i + 3] = 255;
                            }
                        }
                        ctx2.putImageData(imageData2, 0, 0);

                        const outputArray = new Uint8Array(1024);
                        // getPixel(i) outputs the pixel value for any x y coordinate. 0 = black, 1 = white.
                        // the outputArray is 1024 bytes, where each byte is 8 pixels IN VERTICAL ORDER.

                        let i = 0;
                        for (let y = 0; y < 64; y += 8) {
                            for (let x = 0; x < 128; x++) {
                                let byte = 0;
                                for (let i = 0; i < 8; i++) {
                                    byte |= getPixel(x, y + i) << i;
                                }
                                outputArray[i++] = byte;
                            }
                        }


                        this.customImageData.set(outputArray);
                    };
                    img.src = reader.result;
                };
                reader.readAsDataURL(file);
            };
        }

        apply(firmwareData) {
            const offset1 = 0x9b64;
            const offset2 = 0xd218;
            let imageData = null;

            // images have to be 1024 bytes exactly, where each byte is 8 pixels. 128x64 pixels = 1024 bytes
            // this mod optimizes the image data by removing empty lines from top and bottom. leave lots of empty space on top and bottom for the smallest size. 
            if (this.selectTrollface.checked) {
                imageData = hexString("00000000000000000000000000000000000000000000000000000000000000000000008080c040602020b0b090909818383838282c2c2c2cacac8c8c0c1c1c545454541414148484242404440c8c0c0c0c0c0c08183070e08000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080c0fc06030101000000110800040000000000000414000000000000000000000800808080c0c0c2c2c2c0c1c5808a0405081204000000000000030f3ce08000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0f89c26132984d4c4c44040c08084060785850d0f0f0f0e0efcfc18080000000000000e1f3319190c0c0c0707377767c7c58d8f8ec0ca6064743030901414363666c383060c8c1870c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000073fffc02228400080f07efec08383030321001038183c764383818080000020303030346404647c1880888880c0c860606070b0f018180c0c86c6e2fb7e0c0c0800391f80400f80e07f0e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ffe00000fffffff3f8ffe3c3e3fedec6c6c4ccccfcfccdcdccc4c4fcfec6c6c6c2c3c3e3e3fff9f1707838381c1c0e7fffc7c373390d07030000000000c071180e0603010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0ff000000000f3f777fdfc7dfffe7879fffe787070f3fff070707070783ff8383818181c1c0c0c77f78303018980c4e0703a1804000a080c06030381c06030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff870000001020404004888090918101010101018181818101010101014141111111212108101484c8ca606534321a19090c0406020301010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103060c1810303020206060606060606020202030303010101818080c0c0c0c0c040606020301010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
            }
            else if (this.selectQ.checked) {
                imageData = hexString("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008080c0c0c0e0e0c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008080c0e0f0f0f8fcfefefeffffff7f7f3f3f1f1f1f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080c0f0f8fcfeffffffff7f3f1f0f0f0703030180c0c0e0f0f0f8f8f8fcf880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080e0f8feffffffffff3f1f0703010080c0e0f0f8fcfeffff7f7f3f1f1f0f0707070301818080c0c0c0c0c0e0c0e0c0e0c0c0c0808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000081e3f3f3f3f3f3f0f0300000000f0fcfeffffffff3f1f0703010080c0e0f0f8fcfcfeff7f3f3f3f1f1f1f1f1f1f1f3f7ffffffffffffffffcf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080f0fcffffffffffffff07010000000000000000000080c0e0f8ffffffffff7f3f0f01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f3f7ffffffffffffffffefefcfcfcfcfcfefeffffffff9f9f8f870303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101030103030307070f0f0f1f1f1f1f1f0f07030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
            }
            else if (this.selectUVMOD.checked) {
                imageData = hexString
            }
            else if (this.selectNOKIA.checked) {
                imageData = hexStringffffffffffff0f1f3ffffffefcf8e0c08000000000ffffffffffff0000fcfeffffffff0f0f0f0f0f0f0f0f0f0f0f0f0f0ffffffffefc0000ffffffffffff8080c0e0f0f8fc7c7e3f1f0f0f07030101000000ffffffffffff0000000000000080e0f8fcffff7f1f0f3f7ffffffcf8e08000000000000000000000000000000000ffffffffffff000000000103070f1f3ffffffefcf8ffffffffffff00003f7ffffffffff0f0f0f0f0f0f0f0f0f0f0f0f0f0ffffff7f3f0000ffffffffffff00010303070f1f3f7f7efcf8f8f0e0c0c0800000ffffffffffff000080e0f8fcffffff3f3f3f3d3c3c3c3c3c3d3f3f3ffffffffcf8e
            }
            else if (this.selectSuperMarioBros.checked) {
                imageData = hexString
            }
            else if (this.selectCustomFile.checked) {
                imageData = this.customImageData;
//                log(uint8ArrayToHexString(imageData));
            }
            if (imageData.length !== 1024) throw new Error("Размер области с изображением должен быть ровно 1024 байта.");

            // this uses the shellcode from custom_bootscreen_narrow
            let shellcode = hexString("30B5002206490748F6F72AFB064A07490748F6F713FB01F0ADFD01F06FFD30BD0004000084060020CCCCCCCCBBBBBBBBAAAAAAAA");

            // remove empty lines from top
            let offsetLines = 0;
            for (let i = 0; i < 64; i++) {
                if (imageData.slice(i * 16, i * 16 + 16).every(pixel => pixel === 0)) {
                    offsetLines++;
                } else {
                    break;
                }
            }
            imageData = imageData.slice(offsetLines * 16);

            // truncate all zero bytes from the end of the image data
            let endIndex = imageData.length;
            while (endIndex > 0 && imageData[endIndex - 1] === 0) {
                endIndex--;
            }
            imageData = imageData.subarray(0, endIndex);

            // now we can patch the shellcode with the right values
            const shellcodeDataView = new DataView(shellcode.buffer);

            shellcodeDataView.setUint32(1 * -4 + shellcode.length, 0x20000684 + offsetLines * 16, true); // set destination address inside displaybuffer shifted by the amount of removed empty lines
            shellcodeDataView.setUint32(2 * -4 + shellcode.length, firmwareData.length, true); // set source address to the end of the firmware where the image will be stored
            shellcodeDataView.setUint32(3 * -4 + shellcode.length, imageData.length, true); // set length of the image data

            firmwareData = replaceSection(firmwareData, shellcode, offset1);
            firmwareData = replaceSection(firmwareData, hexString("0001"), offset2); // patch bootscreen duration to 2 seconds
            firmwareData = replaceSection(firmwareData, imageData, firmwareData.length);

            log(`Успешно применён: ${this.name}. Использовано ${imageData.length} байт(а) дополнительно.`);

            return firmwareData;
        }
    }
    ,
    class Mod_SkipBootscreen extends FirmwareMod {
        constructor() {
            super("Пропуск приветствия", "Пропускает экран приветствия и сразу отображает главный экран при включении.", 0);
        }

        apply(firmwareData) {
            const offset = 0xd20e;
            const newData = hexString("00bf00bff8f7b9fb00f002f8");
            firmwareData = replaceSection(firmwareData, newData, offset);
            log(`Успешно применён: ${this.name}.`);

            return firmwareData;
        }
    }
    ,


    class Mod_BacklightDuration extends FirmwareMod {
        constructor() {
            super("Множитель длительности подсветки", "Увеличивает длительность подсветки, указанную в настройках, в два, четыре или восемь раз. Например, если указать в настройках 5 и множитель два, то подсветка будет работать 10 секунд.", 0);

            this.select1 = addRadioButton(this.modSpecificDiv, "1x (1 - 1 секунда, 5 - 5 секунд)", "select1", "selectBacklightDuration");
            this.select2 = addRadioButton(this.modSpecificDiv, "2x (1 - 2 секунды, 5 - 10 секунд)", "select2", "selectBacklightDuration");
            this.select4 = addRadioButton(this.modSpecificDiv, "4x (1 - 4 секунды, 5 - 20 секунд)", "select4", "selectBacklightDuration");
            this.select8 = addRadioButton(this.modSpecificDiv, "8x (1 - 8 секунд, 5 - 40 секунд)", "select8", "selectBacklightDuration");
            this.select2.checked = true;
        }

        apply(firmwareData) {
            const offset = 0x599e;
            const buffer = new ArrayBuffer(4);
            const dataView = new DataView(buffer);
            if (this.select1.checked) {
                dataView.setUint32(0, 64, true);
            }
            else if (this.select2.checked) {
                dataView.setUint32(0, 128, true);
            }
            else if (this.select4.checked) {
                dataView.setUint32(0, 192, true);
            }
            else if (this.select8.checked) {
                dataView.setUint32(0, 256, true);
            }

            const newData = new Uint8Array(buffer);
            firmwareData = replaceSection(firmwareData, newData, offset);
            log(`Успешно применён: ${this.name}.`);

            return firmwareData;
        }
    }
    ,
    class Mod_MenuStrings extends FirmwareMod {
        constructor() {
            super("Пункты меню", "Изменяет текст в пунктах меню.", 0);

            this.selectNGCMenuStr = addRadioButton(this.modSpecificDiv, "Модификация пунктов меню от Валентина Воронина", "selectNGCMenuStr", "selectMenuStr");
            this.selectCustMenuStr = addRadioButton(this.modSpecificDiv, "Свои пункты меню. В этом JSON объекте содержатся названия всех пунктов меню со смещением и максимальным размером. Изменять можно только название пункта, длина не должна превышать указанный размер, алфавит только латиница. Для удобства можно воспользоваться сервисом jsoneditoronline.org или аналогичным.", "selectCustMenuStr", "selectMenuStr");
            this.selectNGCMenuStr.checked = true;

            // the  b l o c k
            const strings = [
                              {
                                "offset": 56470,
                                "description": "squelch",
                                "size": 6,
                                "string": "SQLCH"
                              },
                              {
                                "offset": 56477,
                                "description": "step",
                                "size": 6,
                                "string": "STEP"
                              },
                              {
                                "offset": 56484,
                                "description": "txpower",
                                "size": 6,
                                "string": "TXPWR"
                              },
                              {
                                "offset": 56491,
                                "description": "r dcs",
                                "size": 6,
                                "string": "R_DCS"
                              },
                              {
                                "offset": 56498,
                                "description": "r ctcs",
                                "size": 6,
                                "string": "R_CTCS"
                              },
                              {
                                "offset": 56505,
                                "description": "t dcs",
                                "size": 6,
                                "string": "T_DCS"
                              },
                              {
                                "offset": 56512,
                                "description": "t ctcs",
                                "size": 6,
                                "string": "T_CTCS"
                              },
                              {
                                "offset": 56519,
                                "description": "tx shift direction",
                                "size": 6,
                                "string": "SHFT-D"
                              },
                              {
                                "offset": 56526,
                                "description": "tx shift offset",
                                "size": 6,
                                "string": "OFFSET"
                              },
                              {
                                "offset": 56533,
                                "description": "wide/narrow",
                                "size": 6,
                                "string": "BNDWDH"
                              },
                              {
                                "offset": 56540,
                                "description": "scramble",
                                "size": 6,
                                "string": "SCRMBL"
                              },
                              {
                                "offset": 56547,
                                "description": "busy channel ptt lock",
                                "size": 6,
                                "string": "BUSYLK"
                              },
                              {
                                "offset": 56554,
                                "description": "save channel",
                                "size": 6,
                                "string": "MEM-CH"
                              },
                              {
                                "offset": 56561,
                                "description": "battery saver",
                                "size": 6,
                                "string": "BATSVR"
                              },
                              {
                                "offset": 56568,
                                "description": "voice activated mode",
                                "size": 6,
                                "string": "VOXPTT"
                              },
                              {
                                "offset": 56575,
                                "description": "backlight timeout",
                                "size": 6,
                                "string": "BKLGHT"
                              },
                              {
                                "offset": 56582,
                                "description": "dual watch",
                                "size": 6,
                                "string": "DUALRX"
                              },
                              {
                                "offset": 56589,
                                "description": "cross band mode",
                                "size": 6,
                                "string": "CROSS"
                              },
                              {
                                "offset": 56596,
                                "description": "key beep",
                                "size": 6,
                                "string": "BEEP"
                              },
                              {
                                "offset": 56603,
                                "description": "tx timeout",
                                "size": 6,
                                "string": "TXTIME"
                              },
                              {
                                "offset": 56610,
                                "description": "voice prompt",
                                "size": 6,
                                "string": "VOICE"
                              },
                              {
                                "offset": 56617,
                                "description": "scan mode",
                                "size": 6,
                                "string": "SCANMD"
                              },
                              {
                                "offset": 56624,
                                "description": "channel display mode",
                                "size": 6,
                                "string": "CHDISP"
                              },
                              {
                                "offset": 56631,
                                "description": "auto keypad lock",
                                "size": 6,
                                "string": "AUTOLK"
                              },
                              {
                                "offset": 56638,
                                "description": "ch in scan list 1",
                                "size": 6,
                                "string": "S-ADD1"
                              },
                              {
                                "offset": 56645,
                                "description": "ch in scan list 2",
                                "size": 6,
                                "string": "S-ADD2"
                              },
                              {
                                "offset": 56652,
                                "description": "tail tone elimination",
                                "size": 6,
                                "string": "STE"
                              },
                              {
                                "offset": 56659,
                                "description": "repeater tail tone elimination",
                                "size": 6,
                                "string": "RP-STE"
                              },
                              {
                                "offset": 56666,
                                "description": "mic sensitivity",
                                "size": 6,
                                "string": "MIC"
                              },
                              {
                                "offset": 56673,
                                "description": "one key call channel",
                                "size": 6,
                                "string": "1-CALL"
                              },
                              {
                                "offset": 56680,
                                "description": "active scan list",
                                "size": 6,
                                "string": "S-LIST"
                              },
                              {
                                "offset": 56687,
                                "description": "browse scan list 1",
                                "size": 6,
                                "string": "SLIST1"
                              },
                              {
                                "offset": 56694,
                                "description": "browse scan list 2",
                                "size": 6,
                                "string": "SLIST2"
                              },
                              {
                                "offset": 56701,
                                "description": "alarm mode",
                                "size": 6,
                                "string": "AL-MOD"
                              },
                              {
                                "offset": 56708,
                                "description": "dtmf radio id",
                                "size": 6,
                                "string": "ANI-ID"
                              },
                              {
                                "offset": 56715,
                                "description": "dtmf upcode",
                                "size": 6,
                                "string": "UPCODE"
                              },
                              {
                                "offset": 56722,
                                "description": "dtmf downcode",
                                "size": 6,
                                "string": "DWCODE"
                              },
                              {
                                "offset": 56729,
                                "description": "dtmf using keypad while ptt",
                                "size": 6,
                                "string": "D-ST"
                              },
                              {
                                "offset": 56736,
                                "description": "dtmf response mode",
                                "size": 6,
                                "string": "D-RSP"
                              },
                              {
                                "offset": 56743,
                                "description": "dtmf hold time",
                                "size": 6,
                                "string": "D-HOLD"
                              },
                              {
                                "offset": 56750,
                                "description": "dtmf pre-load time",
                                "size": 6,
                                "string": "D-PRE"
                              },
                              {
                                "offset": 56757,
                                "description": "dtmf transmit id on ptt",
                                "size": 6,
                                "string": "PTT-ID"
                              },
                              {
                                "offset": 56764,
                                "description": "dtmf only listen to contacts",
                                "size": 6,
                                "string": "D-DCD"
                              },
                              {
                                "offset": 56771,
                                "description": "dtmf list/call contacts",
                                "size": 6,
                                "string": "D-LIST"
                              },
                              {
                                "offset": 56778,
                                "description": "power on screen",
                                "size": 6,
                                "string": "PONMSG"
                              },
                              {
                                "offset": 56785,
                                "description": "end of talk tone",
                                "size": 6,
                                "string": "ROGER"
                              },
                              {
                                "offset": 56792,
                                "description": "battery voltage",
                                "size": 6,
                                "string": "VOL"
                              },
                              {
                                "offset": 56799,
                                "description": "enable AM reception on AM bands",
                                "size": 6,
                                "string": "AM"
                              },
                              {
                                "offset": 56806,
                                "description": "enable NOAA scan",
                                "size": 6,
                                "string": "NOAA_S"
                              },
                              {
                                "offset": 56813,
                                "description": "delete channel",
                                "size": 6,
                                "string": "DEL-CH"
                              },
                              {
                                "offset": 56820,
                                "description": "reset radio",
                                "size": 6,
                                "string": "RESET"
                              },
                              {
                                "offset": 56827,
                                "description": "enable tx on 350mhz band",
                                "size": 6,
                                "string": "350TX"
                              },
                              {
                                "offset": 56834,
                                "description": "limit to local ham frequencies",
                                "size": 6,
                                "string": "F-LOCK"
                              },
                              {
                                "offset": 56841,
                                "description": "enable tx on 200mhz band",
                                "size": 6,
                                "string": "200TX"
                              },
                              {
                                "offset": 56848,
                                "description": "enable tx on 500mhz band",
                                "size": 6,
                                "string": "500TX"
                              },
                              {
                                "offset": 56855,
                                "description": "enable 350mhz band",
                                "size": 6,
                                "string": "350EN"
                              },
                              {
                                "offset": 56862,
                                "description": "enable scrambler option",
                                "size": 6,
                                "string": "SCREN"
                              },
                              {
                                "offset": 56869,
                                "description": "battery saver: off",
                                "size": 3,
                                "string": "OFF"
                              },
                              {
                                "offset": 56873,
                                "description": "battery saver: 1:1",
                                "size": 3,
                                "string": "1:1"
                              },
                              {
                                "offset": 56877,
                                "description": "battery saver: 1:2",
                                "size": 3,
                                "string": "1:2"
                              },
                              {
                                "offset": 56881,
                                "description": "battery saver: 1:3",
                                "size": 3,
                                "string": "1:3"
                              },
                              {
                                "offset": 56885,
                                "description": "battery saver: 1:4",
                                "size": 3,
                                "string": "1:4"
                              },
                              {
                                "offset": 56889,
                                "description": "tx power: low",
                                "size": 4,
                                "string": "LOW"
                              },
                              {
                                "offset": 56894,
                                "description": "tx power: mid",
                                "size": 4,
                                "string": "MID"
                              },
                              {
                                "offset": 56899,
                                "description": "tx power: high",
                                "size": 4,
                                "string": "HIGH"
                              },
                              {
                                "offset": 56904,
                                "description": "bandwidth: wide",
                                "size": 6,
                                "string": "WIDE"
                              },
                              {
                                "offset": 56911,
                                "description": "bandwidth: narrow",
                                "size": 6,
                                "string": "NARROW"
                              },
                              {
                                "offset": 56918,
                                "description": "multiple options 1: off",
                                "size": 6,
                                "string": "OFF"
                              },
                              {
                                "offset": 56925,
                                "description": "multiple options 1: chan a",
                                "size": 6,
                                "string": "CHAN_A"
                              },
                              {
                                "offset": 56932,
                                "description": "multiple options 1: chan b",
                                "size": 6,
                                "string": "CHAN_B"
                              },
                              {
                                "offset": 56939,
                                "description": "multiple options 2: off",
                                "size": 3,
                                "string": "OFF"
                              },
                              {
                                "offset": 56943,
                                "description": "multiple options 2: on",
                                "size": 3,
                                "string": "ON"
                              },
                              {
                                "offset": 56947,
                                "description": "voice prompt: off",
                                "size": 3,
                                "string": "OFF"
                              },
                              {
                                "offset": 56951,
                                "description": "voice prompt: chinese",
                                "size": 3,
                                "string": "CHI"
                              },
                              {
                                "offset": 56955,
                                "description": "voice prompt: english",
                                "size": 3,
                                "string": "ENG"
                              },
                              {
                                "offset": 56959,
                                "description": "dtmf ptt id: off",
                                "size": 4,
                                "string": "OFF"
                              },
                              {
                                "offset": 56964,
                                "description": "dtmf ptt id: upcode on ptt",
                                "size": 4,
                                "string": "BOT"
                              },
                              {
                                "offset": 56969,
                                "description": "dtmf ptt id: downcode after ptt",
                                "size": 4,
                                "string": "EOT"
                              },
                              {
                                "offset": 56974,
                                "description": "dtmf ptt id: both",
                                "size": 4,
                                "string": "BOTH"
                              },
                              {
                                "offset": 56979,
                                "description": "scan mode: continue after 5s",
                                "size": 2,
                                "string": "TO"
                              },
                              {
                                "offset": 56982,
                                "description": "scan mode: stay while signal",
                                "size": 2,
                                "string": "CO"
                              },
                              {
                                "offset": 56985,
                                "description": "scan mode: stop on signal",
                                "size": 2,
                                "string": "SE"
                              },
                              {
                                "offset": 56988,
                                "description": "channel display mode: freq",
                                "size": 4,
                                "string": "FREQ"
                              },
                              {
                                "offset": 56993,
                                "description": "channel display mode: chan",
                                "size": 4,
                                "string": "CHAN"
                              },
                              {
                                "offset": 56998,
                                "description": "channel display mode: name",
                                "size": 4,
                                "string": "NAME"
                              },
                              {
                                "offset": 57003,
                                "description": "tx shift direction: off",
                                "size": 4,
                                "string": "OFF"
                              },
                              {
                                "offset": 57007,
                                "description": "tx shift direction: +",
                                "size": 4,
                                "string": "+"
                              },
                              {
                                "offset": 57011,
                                "description": "tx shift direction: -",
                                "size": 4,
                                "string": "-"
                              },
                              {
                                "offset": 57015,
                                "description": "alarm mode: local",
                                "size": 4,
                                "string": "SITE"
                              },
                              {
                                "offset": 57020,
                                "description": "alarm mode: local + remote",
                                "size": 4,
                                "string": "TONE"
                              },
                              {
                                "offset": 57025,
                                "description": "power on screen: full",
                                "size": 4,
                                "string": "FULL"
                              },
                              {
                                "offset": 57030,
                                "description": "power on screen: custom message",
                                "size": 4,
                                "string": "MSG"
                              },
                              {
                                "offset": 57035,
                                "description": "power on screen: batt voltage",
                                "size": 4,
                                "string": "VOL"
                              },
                              {
                                "offset": 57040,
                                "description": "reset: keep channel parameters",
                                "size": 3,
                                "string": "VFO"
                              },
                              {
                                "offset": 57044,
                                "description": "reset: reset everything",
                                "size": 3,
                                "string": "ALL"
                              },
                              {
                                "offset": 57048,
                                "description": "dtmf response: nothing",
                                "size": 5,
                                "string": "NULL"
                              },
                              {
                                "offset": 57054,
                                "description": "dtmf response: local ring",
                                "size": 5,
                                "string": "RING"
                              },
                              {
                                "offset": 57060,
                                "description": "dtmf response: auto call back",
                                "size": 5,
                                "string": "REPLY"
                              },
                              {
                                "offset": 57066,
                                "description": "dtmf response: ring and call",
                                "size": 5,
                                "string": "BOTH"
                              },
                              {
                                "offset": 57072,
                                "description": "end of talk tone: off",
                                "size": 5,
                                "string": "OFF"
                              },
                              {
                                "offset": 57078,
                                "description": "end of talk tone: classic beep",
                                "size": 5,
                                "string": "ROGER"
                              },
                              {
                                "offset": 57084,
                                "description": "end of talk tone: MDC ID sound",
                                "size": 5,
                                "string": "MDC"
                              },
                              {
                                "offset": 57090,
                                "description": "f lock: none",
                                "size": 3,
                                "string": "OFF"
                              },
                              {
                                "offset": 57094,
                                "description": "f lock: region FCC",
                                "size": 3,
                                "string": "FCC"
                              },
                              {
                                "offset": 57098,
                                "description": "f lock: region Europe",
                                "size": 3,
                                "string": "CE"
                              },
                              {
                                "offset": 57102,
                                "description": "f lock: region GB",
                                "size": 3,
                                "string": "GB"
                              },
                              {
                                "offset": 57106,
                                "description": "f lock: 430 band",
                                "size": 3,
                                "string": "430"
                              },
                              {
                                "offset": 57110,
                                "description": "f lock: 438 band",
                                "size": 3,
                                "string": "438"
                              }
                            ];

            this.menuStringsTextarea = document.createElement("textarea");
            this.menuStringsTextarea.classList.add("w-100", "form-control");
            this.menuStringsTextarea.rows = "7";
            this.menuStringsTextarea.placeholder = "Тут должен быть JSON-объект, перезагрузите страницу, чтобы сбросить!";
            this.menuStringsTextarea.value = JSON.stringify(strings, null, 2);

            this.modSpecificDiv.appendChild(this.menuStringsTextarea);
        }

        apply(firmwareData) {

            if (this.selectNGCMenuStr.checked) {
                var jsonData = [
                                {
                                  "offset": 56470,
                                  "description": "squelch",
                                  "size": 6,
                                  "string": "SQL"
                                },
                                {
                                  "offset": 56484,
                                  "description": "txpower",
                                  "size": 6,
                                  "string": "TX-POW"
                                },
                                {
                                  "offset": 56519,
                                  "description": "tx shift direction",
                                  "size": 6,
                                  "string": "TXSDIR"
                                },
                                {
                                  "offset": 56526,
                                  "description": "tx shift offset",
                                  "size": 6,
                                  "string": "TXSOFF"
                                },
                                {
                                  "offset": 56533,
                                  "description": "wide/narrow",
                                  "size": 6,
                                  "string": "W/N"
                                },
                                {
                                  "offset": 56547,
                                  "description": "busy channel ptt lock",
                                  "size": 6,
                                  "string": "BUSY-L"
                                },
                                {
                                  "offset": 56561,
                                  "description": "battery saver",
                                  "size": 6,
                                  "string": "ECOMOD"
                                },
                                {
                                  "offset": 56568,
                                  "description": "voice activated mode",
                                  "size": 6,
                                  "string": "VOX"
                                },
                                {
                                  "offset": 56575,
                                  "description": "backlight timeout",
                                  "size": 6,
                                  "string": "BACKLT"
                                },
                                {
                                  "offset": 56582,
                                  "description": "dual watch",
                                  "size": 6,
                                  "string": "DUALWT"
                                },
                                {
                                  "offset": 56589,
                                  "description": "cross band mode",
                                  "size": 6,
                                  "string": "WX"
                                },
                                {
                                  "offset": 56603,
                                  "description": "tx timeout",
                                  "size": 6,
                                  "string": "TOT"
                                },
                                {
                                  "offset": 56617,
                                  "description": "scan mode",
                                  "size": 6,
                                  "string": "SCNMOD"
                                },
                                {
                                  "offset": 56624,
                                  "description": "channel display mode",
                                  "size": 6,
                                  "string": "CH_MOD"
                                },
                                {
                                  "offset": 56792,
                                  "description": "battery voltage",
                                  "size": 6,
                                  "string": "BAT_V"
                                },
                                {
                                  "offset": 56827,
                                  "description": "enable tx on 350mhz band",
                                  "size": 6,
                                  "string": "5BNDTX"
                                },
                                {
                                  "offset": 56841,
                                  "description": "enable tx on 200mhz band",
                                  "size": 6,
                                  "string": "4BNDTX"
                                },
                                {
                                  "offset": 56848,
                                  "description": "enable tx on 500mhz band",
                                  "size": 6,
                                  "string": "7BNDTX"
                                },
                                {
                                  "offset": 56855,
                                  "description": "enable 350mhz band",
                                  "size": 6,
                                  "string": "5BNDEN"
                                },
                                {
                                  "offset": 56951,
                                  "description": "voice prompt: chinese",
                                  "size": 3,
                                  "string": "CN"
                                },
                                {
                                  "offset": 56955,
                                  "description": "voice prompt: english",
                                  "size": 3,
                                  "string": "EN"
                                },
                                {
                                  "offset": 56979,
                                  "description": "scan mode: continue after 5s",
                                  "size": 2,
                                  "string": "5S"
                                },
                                {
                                  "offset": 56982,
                                  "description": "scan mode: stay while signal",
                                  "size": 2,
                                  "string": "WA"
                                },
                                {
                                  "offset": 56985,
                                  "description": "scan mode: stop on signal",
                                  "size": 2,
                                  "string": "ST"
                                },
                                {
                                  "offset": 57098,
                                  "description": "f lock: region Europe",
                                  "size": 3,
                                  "string": "EU"
                                }
                              ];
                log(`Меню от Валентина Воронина`);
            }
            else if (this.selectCustMenuStr.checked) {
                var jsonData = JSON.parse(this.menuStringsTextarea.value);
                log(`Меню со своими пунктами`);
            }

            const encoder = new TextEncoder();

            jsonData.forEach(({ offset, size, string }) => {
                const encodedString = encoder.encode(string);
                const padding = new Uint8Array(size - encodedString.length);
                const paddedString = new Uint8Array(encodedString.length + padding.length);
                paddedString.set(encodedString);
                paddedString.set(padding, encodedString.length);

                firmwareData = replaceSection(firmwareData, paddedString, offset + 40); //mod for v27
            });

            log(`Успешно применён: ${this.name}.`);
            return firmwareData;
        }

    }
    ,
    class Mod_MicGain extends FirmwareMod {
        constructor() {
            super("Увеличить усиление микрофона", "Добавляет усиления микрофону. Вы по прежнему можете настраивать усиление в меню с той лишь разницей, что теперь все уровни будут громче, чем раньше.", 0);
        }

        apply(firmwareData) {
            const offset = 0xa90c;
            const offset2 = 0x1cbc;
            const newData = hexString("4fe90000");

            firmwareData = replaceSection(firmwareData, newData, offset);
            firmwareData = replaceSection(firmwareData, newData, offset2);
            log(`Успешно применён: ${this.name}.`);

            return firmwareData;
        }
    }
    ,
    class Mod_RogerBeep extends FirmwareMod {
        constructor() {
            super("Roger Beep", "Изменяет тональность двух тонов подтверждения передачи. Первый тон звучит 150мс, второй - 80мс. По умолчанию мод звучит как у Mototrbo. максимальная частота 6347Гц.", 0);
            this.inputTone1 = addInputField(this.modSpecificDiv, ["Тон 1:","Гц"], "1540");
            this.inputTone2 = addInputField(this.modSpecificDiv, ["Тон 2:","Гц"], "1310");
        }

        apply(firmwareData) {
            const offset = 0xaef8;
            const tone1 = Math.trunc(parseInt(this.inputTone1.value) * 10.32444);
            const tone2 = Math.trunc(parseInt(this.inputTone2.value) * 10.32444);

            if (tone1 <= 0xFFFF && tone2 <= 0xFFFF) {
                // Create an 8-byte buffer with the specified values
                const buffer = new ArrayBuffer(8);
                const dataView = new DataView(buffer);

                // Set tone1 and tone2 at their respective offsets
                dataView.setUint32(0, tone1, true); // true indicates little-endian byte order
                dataView.setUint32(4, tone2, true);

                // Convert the buffer to a Uint8Array
                const tonesHex = new Uint8Array(buffer);

                // Replace the 8-byte section at the offset with the new buffer
                firmwareData = replaceSection(firmwareData, tonesHex, offset);
                firmwareData = replaceSection(firmwareData, hexString("96"), 0xaec2);

//                log(uint8ArrayToHexString(tonesHex));
                log(`Успешно применён: ${this.name}.`);
            }
            else {
                log(`Ошибка применения ${this.name}: Некорректно указана частота.`);
            }

            return firmwareData;
        }
    }
    ,
    class Mod_ChangeToneBrust extends FirmwareMod {
        constructor() {
            super("Частота тонального сигнала", "(Непроверенный мод) В функциях кнопок есть отправка тонального сигнала для включения репитера с частотой 1750Гц. Здесь можно изменить частоту этого тона, например, на 1050Гц для активации фонового поиска для частот NOAA. Другие часто используемые частоты тональных сигналов для примера: 1000Гц, 1450Гц, 1750Гц, 2100Гц. Диапазон  1000-3950Гц.", 0);
            this.toneValue = addInputField(this.modSpecificDiv, ["Тон:", "Гц"], "1750");
        }

        apply(firmwareData) {
            const offset = 0x29f0
            const inputValue = parseInt(this.toneValue.value);

            if (!isNaN(inputValue) && inputValue >= 1000 && inputValue <= 3950) {
                const newData = new Uint8Array(4);
                const dataView = new DataView(newData.buffer);
                dataView.setUint32(0, inputValue, true);
                firmwareData = replaceSection(firmwareData, newData, offset); // does not seem to work
                log(`Успешно применён: ${this.name}.`);
            }
            else {
                log(`Ошибка применения ${this.name}: Частота тонального сигнала должна быть в диапазоне 1000-3950Гц!`);
            }
            return firmwareData;
        }
    }
    ,
    class Mod_FreqCopyTimeout extends FirmwareMod {
        constructor() {
            super("Откл. таймаут при копировании", "Отключает таймаут при использовании функции копирования частоты/субтонов с сообщением \"SCAN FAIL\", позволяя продолжать сканирование пока не будет обнаружен сигнал.", 0);
        }

        apply(firmwareData) {
            const offset = 0x4be4;
            const newData = hexString("00bf");
            firmwareData = replaceSection(firmwareData, newData, offset);
            log(`Успешно применён: ${this.name}.`);

            return firmwareData;
        }
    }
    ,
    class Mod_AMOnAllBands extends FirmwareMod {
        constructor() {
            super("Разрешить приём AM везде", "Разрешает указывать модуляцию AM на любых диапазонах, а не только на авиа.", 0);
        }

        apply(firmwareData) {
            const offset1 = 0x625a;
            const offset2 = 0x626e;
            const offset3 = 0x6274;
            const newData1 = hexString("0e");
            const newData2 = hexString("04");
            const newData3 = hexString("01e0");

            firmwareData = replaceSection(firmwareData, newData1, offset1);
            firmwareData = replaceSection(firmwareData, newData2, offset2);
            firmwareData = replaceSection(firmwareData, newData3, offset3);
            log(`Успешно применён: ${this.name}.`);

            return firmwareData;
        }
    }
    ,
    class Mod_ChangeTXLimits extends FirmwareMod {
        constructor() {
            super("Диапазон TX", "Меняет верхний и нижний программный предел для передачи. Если необходимо разрешить передачу во всём этом диапазоне - воспользуйтесь дополнительно модом \"Разрешить передачу\" или разблокируйте нужные диапазоны в скрытом меню (PTT + FN1 при включении рации).", 0);
            this.hidden = true;

            [this.inputMinTX, this.inputMaxTX] = addTwoInputFields(this.modSpecificDiv, ["От:","до:","МГц"], "50", "600");

        }

        apply(firmwareData) {
            const offset = 0x1534;
            const txStart = parseInt(this.inputMinTX.value) * 100000;
            const txStop = parseInt(this.inputMaxTX.value) * 100000;

            if ((txStart <= txStop) && (txStart >= 1800000) && (txStart <= 130000000) && (txStop >= 1800000) && (txStop <= 130000000)) {

                const buffer = new ArrayBuffer(8);
                const dataView = new DataView(buffer);

                dataView.setUint32(0, txStart, true);
                dataView.setUint32(4, txStop, true);

                const txHex = new Uint8Array(buffer);

                firmwareData = replaceSection(firmwareData, txHex, offset);
                log(`Успешно применён: ${this.name}.`);
            }
            else {
                log(`Ошибка применения ${this.name}: Неверные данные! Частоты должны быть более 18 МГц и менее 1300 МГц, максимальная больше или равна минимальной.`);
            }

            return firmwareData;
        }
    }
    ,
    class Mod_EnableTXRange extends FirmwareMod {
        constructor() {
            super("Разрешить передачу", "ВНИМАНИЕ! Разрешает передавать на любых частотах из диапазона TX. Игнорирует настройки скрытого меню. Использовать только для тестов, не включайте передачу вне разрешённых диапазонов!", 0);
            this.hidden = true;
            this.selectTXSimple = addRadioButton(this.modSpecificDiv, "Простой режим: Разрешить передачу на любой частоте из диапазона TX (указывается в моде \"Диапазон TX\").", "selectTXSimpleMode", "selectTXRangeMode");
            this.selectTXCustom = addRadioButton(this.modSpecificDiv, "Расширенный режим: Заменяет проверку на запрет TX простой функцией, которая блокирует или разрешает передачу в определённом диапазоне частот.", "selectTXCustomMode", "selectTXRangeMode");
            this.selectTXSimple.checked = true;

            const customTXModeCardDiv = document.createElement("div");
            customTXModeCardDiv.classList.add("d-none", "card", "md-3");

            const customTXModeDiv = document.createElement("div");
            customTXModeDiv.classList.add("card-body");

            const explanationTX = document.createElement("p");
            explanationTX.innerText = "Этот режим может быть использован, например, чтобы запретить передачу в авиадиапазоне, или чтобы сделать рацию передающей только в диапазоне PMR/LPD. По умолчанию значения соответствуют запрету передачи в авиадиапазоне и разрешению в остальных диапазонах.";
            customTXModeDiv.appendChild(explanationTX);

            this.selectTXBlock = addRadioButton(customTXModeDiv, "Диапазон будет заблокирован, остальные разрешены. ", "selectTXBlock", "selectTXRange");
            this.selectTXAllow = addRadioButton(customTXModeDiv, "Диапазон будет разрешён, остальные заблокированы. ", "selectTXAllow", "selectTXRange");
            this.selectTXBlock.checked = true;
            [this.lowFreq, this.highFreq] = addTwoInputFields(customTXModeDiv, ["От:","до:","Гц"], "118000000", "137000000");

            customTXModeCardDiv.appendChild(customTXModeDiv);
            this.modSpecificDiv.appendChild(customTXModeCardDiv);

            this.selectTXCustom.parentElement.parentElement.addEventListener("change", () => {
                customTXModeCardDiv.classList.toggle("d-none", !this.selectTXCustom.checked);
            });
        }

        apply(firmwareData) {
            if (this.selectTXSimple.checked) {
                const offset = 0x1836;
                const newData = hexString("5de0");

                firmwareData = replaceSection(firmwareData, newData, offset);
                log(`Успешно применён: ${this.name}.`);
            }
            else if (this.selectTXCustom.checked) {
			    const offset = 0x182c;
                let shellcode;
                if (this.selectTXBlock.checked) {
                    shellcode = hexString("f0b5014649690968054a914205d3054a914202d20020c04301e00020ffe7f0bd1111111122222222");
                }
                else if (this.selectTXAllow.checked) {
                    shellcode = hexString("F0B5014649690968054A914204D3054A914201D2002002E00020C043FFE7F0BD1111111122222222");
                }
                const dataView = new DataView(shellcode.buffer);
                const lowFreq = Math.floor(this.lowFreq.value / 10);
                const highFreq = Math.floor(this.highFreq.value / 10);
                dataView.setUint32(32, lowFreq, true);
                dataView.setUint32(36, highFreq, true);
			    
                firmwareData = replaceSection(firmwareData, shellcode, offset);
                log(`Успешно применён: ${this.name}.`);
			}

            return firmwareData;
        }
    }
    ,
    class Mod_EnableTXStock extends FirmwareMod {
        constructor() {
            super("Восстановить ограничения TX", "ВНИМАНИЕ! Применять только если используется не стоковая прошивка в качестве основы для модов в случае, если вам не требуется возможность передачи на любых частотах.", 0);
            this.hidden = true;
        }

        apply(firmwareData) {
            const offset = 0x182c;
            const newData = hexString("F0B50146827F0020C043CF2A2FD22F4A4969127809682E4B2E4C2F4E012A19D02E4D2F4F022A1BD0");
            firmwareData = replaceSection(firmwareData, newData, offset);
            log(`Успешно применён: ${this.name}.`);

            return firmwareData;
        }
    }
    ,
    class Mod_DisableTX extends FirmwareMod {
        constructor() {
            super("Отключить передачу полностью", "Запрещает передачу на всех частотах, превращая рацию в приёмник.", 0);
        }

        apply(firmwareData) {
            const offset = 0x1836;
            const newData = hexString("f0bd");
            firmwareData = replaceSection(firmwareData, newData, offset);
            log(`Успешно применён: ${this.name}.`);

            return firmwareData;
        }
    }
    ,
    class Mod_FrequencyRangeAdvanced extends FirmwareMod {
        constructor() {
            super("Диапазоны частот", "Позволяет изменить диапазоны приёма в пределах от 18 МГц до 1300 МГц. Диапазоны передачи не изменяются.", 0);
            this.selectSimple = addRadioButton(this.modSpecificDiv, "Простой режим: Расширить 1-й диапазон вниз до указанной минимальной частоты, а 7-й диапазон вверх до указанной максимальной частоты.", "selectSimpleMode", "selectFrequencyRange");
            this.selectCustom = addRadioButton(this.modSpecificDiv, "Расширенный режим: Позволяет вручную изменить сетку диапазонов рации.", "selectCustomMode", "selectFrequencyRange");
            this.selectSimple.checked = true;

            const modeCardDiv = document.createElement("div");
            modeCardDiv.classList.add("card", "mt-2");
            const simpleModeDiv = document.createElement("div");
            simpleModeDiv.classList.add("card-body");
            [this.inputMinRX, this.inputMaxRX] = addTwoInputFields(simpleModeDiv, ["От:","до:","МГц"], "50", "600");
            modeCardDiv.appendChild(simpleModeDiv);

            const customModeDiv = document.createElement("div");
            customModeDiv.classList.add("d-none", "card-body");

            const explanation = document.createElement("p");
            explanation.innerText = "Здесь вы можете настроить сетку диапазонов. Пожалуйста, убедитесь что диапазоны указаны в корректном порядке и не пересекаются. Диапазон значений в пределах от 18МГц до 1300МГц, с разрывом от 630 до 840 МГц, где невозможны приём и передача из-за аппаратных ограничений.";
            customModeDiv.appendChild(explanation);

            this.range1Inputs = addTwoInputFields(customModeDiv, ["1-й диапазон.","-","Гц"], "50000000", "76000000");
            this.range2Inputs = addTwoInputFields(customModeDiv, ["2-й диапазон.","-","Гц"], "108000000", "135999900");
            this.range3Inputs = addTwoInputFields(customModeDiv, ["3-й диапазон.","-","Гц"], "136000000", "173999900");
            this.range4Inputs = addTwoInputFields(customModeDiv, ["4-й диапазон.","-","Гц"], "174000000", "349999900");
            this.range5Inputs = addTwoInputFields(customModeDiv, ["5-й диапазон.","-","Гц"], "350000000", "399999900");
            this.range6Inputs = addTwoInputFields(customModeDiv, ["6-й диапазон.","-","Гц"], "400000000", "469999900");
            this.range7Inputs = addTwoInputFields(customModeDiv, ["7-й диапазон.","-","Гц"], "470000000", "600000000");

            modeCardDiv.appendChild(customModeDiv);

            this.modSpecificDiv.appendChild(modeCardDiv);

            this.selectCustom.parentElement.parentElement.addEventListener("change", () => {
                customModeDiv.classList.toggle("d-none", !this.selectCustom.checked);
                simpleModeDiv.classList.toggle("d-none", !this.selectSimple.checked);
            });
        }

        apply(firmwareData) {
            const offset = 0xe09c;

            if (this.selectSimple.checked) {
                const rxStart = parseInt(this.inputMinRX.value) * 100000;
                const rxStop = parseInt(this.inputMaxRX.value) * 100000;
                if ((rxStart <= rxStop) && (rxStart >= 100000) && (rxStart <= 130000000) && (rxStop >= 100000) && (rxStop <= 130000000)) {
			    
                    const bufferLow = new ArrayBuffer(4);
                    const dataViewLow = new DataView(bufferLow);
                    const bufferHi = new ArrayBuffer(4);
                    const dataViewHi = new DataView(bufferHi);
			    
                    dataViewLow.setUint32(0, rxStart, true);
                    dataViewHi.setUint32(0, rxStop, true);
			    
                    const rxHexLow = new Uint8Array(bufferLow);
                    const rxHexHi = new Uint8Array(bufferHi);
			    
                    firmwareData = replaceSection(firmwareData, rxHexLow, offset);
                    firmwareData = replaceSection(firmwareData, rxHexHi, offset + (4 * 7) + (4 * 6));
			    
                    log(`Успешно применён: ${this.name}.`);
                }
                else {
                    log(`Ошибка применения ${this.name}: Неверные данные! Частоты должны быть более 18 МГц и менее 1300 МГц, максимальная больше или равна минимальной.`);
                }
            }
            else if (this.selectCustom.checked) {

                const lowerFreqs = [
                    Math.trunc(parseInt(this.range1Inputs[0].value) * 0.1),
                    Math.trunc(parseInt(this.range2Inputs[0].value) * 0.1),
                    Math.trunc(parseInt(this.range3Inputs[0].value) * 0.1),
                    Math.trunc(parseInt(this.range4Inputs[0].value) * 0.1),
                    Math.trunc(parseInt(this.range5Inputs[0].value) * 0.1),
                    Math.trunc(parseInt(this.range6Inputs[0].value) * 0.1),
                    Math.trunc(parseInt(this.range7Inputs[0].value) * 0.1)
                ];
                const higherFreqs = [
                    Math.trunc(parseInt(this.range1Inputs[1].value) * 0.1),
                    Math.trunc(parseInt(this.range2Inputs[1].value) * 0.1),
                    Math.trunc(parseInt(this.range3Inputs[1].value) * 0.1),
                    Math.trunc(parseInt(this.range4Inputs[1].value) * 0.1),
                    Math.trunc(parseInt(this.range5Inputs[1].value) * 0.1),
                    Math.trunc(parseInt(this.range6Inputs[1].value) * 0.1),
                    Math.trunc(parseInt(this.range7Inputs[1].value) * 0.1)
                ];

                const buffer = new ArrayBuffer(4 * 7 * 2);
                const dataView = new DataView(buffer);

                for (let i = 0; i < lowerFreqs.length; i++) {
                    dataView.setUint32(i * 4, lowerFreqs[i], true);
                    dataView.setUint32(i * 4 + 28, higherFreqs[i], true);
                }

                const freqsHex = new Uint8Array(buffer);
                console.log(freqsHex);
                console.log(uint8ArrayToHexString(freqsHex));

                firmwareData = replaceSection(firmwareData, freqsHex, offset);

                log(`Успешно применён: ${this.name}.`);
            }

            return firmwareData;
        }
    }
    ,
    class Mod_FrequencySteps extends FirmwareMod {
        constructor() {
            super("Шаг перестройки частоты", "Изменить доступные в меню шаги чатоты.", 0);
            this.inputStep1 = addInputField(this.modSpecificDiv, ["Шаг 1", "Гц"], "2500");
            this.inputStep2 = addInputField(this.modSpecificDiv, ["Шаг 2", "Гц"], "5000");
            this.inputStep3 = addInputField(this.modSpecificDiv, ["Шаг 3", "Гц"], "6250");
            this.inputStep4 = addInputField(this.modSpecificDiv, ["Шаг 4", "Гц"], "10000");
            this.inputStep5 = addInputField(this.modSpecificDiv, ["Шаг 5", "Гц"], "12500");
            this.inputStep6 = addInputField(this.modSpecificDiv, ["Шаг 6", "Гц"], "25000");
            this.inputStep7 = addInputField(this.modSpecificDiv, ["Шаг 7", "Гц"], "8330");

            const inputStep7Help = document.createElement("small");
            inputStep7Help.classList.add("form-text", "text-muted");
            inputStep7Help.innerText = "Шаг 7 доступен только на втором диапазоне";
            this.modSpecificDiv.appendChild(inputStep7Help);
        }

        apply(firmwareData) {
            const offset = 0xE0F0;

            const steps = [
                Math.trunc(parseInt(this.inputStep1.value) * 0.1),
                Math.trunc(parseInt(this.inputStep2.value) * 0.1),
                Math.trunc(parseInt(this.inputStep3.value) * 0.1),
                Math.trunc(parseInt(this.inputStep4.value) * 0.1),
                Math.trunc(parseInt(this.inputStep5.value) * 0.1),
                Math.trunc(parseInt(this.inputStep6.value) * 0.1),
                Math.trunc(parseInt(this.inputStep7.value) * 0.1),
            ];

            // Create an 8-byte buffer with the specified values
            const buffer = new ArrayBuffer(14);
            const dataView = new DataView(buffer);

            // Set each step at their respective offsets
            for (let i = 0; i < steps.length; i++) {
                dataView.setUint16(i * 2, steps[i], true); // true indicates little-endian byte order
            }

            // Convert the buffer to a Uint8Array
            const stepsHex = new Uint8Array(buffer);

            // Replace the 14-byte section at the offset with the new buffer
            firmwareData = replaceSection(firmwareData, stepsHex, offset);

            log(`Успешно применён: ${this.name}.`);
            return firmwareData;
        }
    }
    ,
    class Mod_NOAAFrequencies extends FirmwareMod {
        constructor() {
            super("Частоты NOAA", "Функция сканирования частот NOAA уникальна, поскольку сканирование может происходить в фоне, постоянно. Тем не менее большинству не требуются эти предупреждения о погоде, поскольку эта служба не работает в их стране. Этот мод позволяет изменить частоты чтобы использовать данную функцию для сканирования чего-то другого. Однако, стоит иметь в виду, что для открытия шумодава необходим тон 1050Гц. Значения ниже предустановлены на первые 10 PMR446 каналов. ", 0);
            this.inputFreq1 = addInputField(this.modSpecificDiv,   ["Канал 01", "Гц"], "446006250");
            this.inputFreq2 = addInputField(this.modSpecificDiv,   ["Канал 02", "Гц"], "446018750");
            this.inputFreq3 = addInputField(this.modSpecificDiv,   ["Канал 03", "Гц"], "446031250");
            this.inputFreq4 = addInputField(this.modSpecificDiv,   ["Канал 04", "Гц"], "446043750");
            this.inputFreq5 = addInputField(this.modSpecificDiv,   ["Канал 05", "Гц"], "446056250");
            this.inputFreq6 = addInputField(this.modSpecificDiv,   ["Канал 06", "Гц"], "446068750");
            this.inputFreq7 = addInputField(this.modSpecificDiv,   ["Канал 07", "Гц"], "446081250");
            this.inputFreq8 = addInputField(this.modSpecificDiv,   ["Канал 08", "Гц"], "446093750");
            this.inputFreq9 = addInputField(this.modSpecificDiv,   ["Канал 09", "Гц"], "446106250");
            this.inputFreq10 = addInputField(this.modSpecificDiv,  ["Канал 10", "Гц"], "446118750");
        }

        apply(firmwareData) {
            const offset = 0xE100;

            const freqs = [
                Math.trunc(parseInt(this.inputFreq1.value) * 0.1),
                Math.trunc(parseInt(this.inputFreq2.value) * 0.1),
                Math.trunc(parseInt(this.inputFreq3.value) * 0.1),
                Math.trunc(parseInt(this.inputFreq4.value) * 0.1),
                Math.trunc(parseInt(this.inputFreq5.value) * 0.1),
                Math.trunc(parseInt(this.inputFreq6.value) * 0.1),
                Math.trunc(parseInt(this.inputFreq7.value) * 0.1),
                Math.trunc(parseInt(this.inputFreq8.value) * 0.1),
                Math.trunc(parseInt(this.inputFreq9.value) * 0.1),
                Math.trunc(parseInt(this.inputFreq10.value) * 0.1)
            ];

            // Create an 8-byte buffer with the specified values
            const buffer = new ArrayBuffer(40);
            const dataView = new DataView(buffer);

            // Set each step at their respective offsets
            for (let i = 0; i < freqs.length; i++) {
                dataView.setUint32(i * 4, freqs[i], true); // true indicates little-endian byte order
            }

            // Convert the buffer to a Uint8Array
            const freqsHex = new Uint8Array(buffer);

            // Replace the 14-byte section at the offset with the new buffer
            firmwareData = replaceSection(firmwareData, freqsHex, offset);

            log(`Успешно применён: ${this.name}.`);
            return firmwareData;
        }
    }
    ,
    class Mod_CustomFm_radio extends FirmwareMod {
        constructor() {
            super("Частоты FM-радио", "Изменение диапазона работы FM-приёмника. По умолчанию 76 - 108 МГц.", 0);

            this.select6476mhz = addRadioButton(this.modSpecificDiv, "FM 64 - 76 МГц", "select6476mhz", "selectFm_radio");
            this.select64108mhz = addRadioButton(this.modSpecificDiv, "FM 64 - 108 МГц", "select64108mhz", "selectFm_radio");
            this.select76108mhz = addRadioButton(this.modSpecificDiv, "FM 76 - 108 МГц", "select76108mhz", "selectFm_radio");
            this.select87108mhz = addRadioButton(this.modSpecificDiv, "FM 86.4 - 108 МГц", "select87108mhz", "selectFm_radio");
            this.select88108mhz = addRadioButton(this.modSpecificDiv, "FM 88 - 108 МГц", "select88108mhz", "selectFm_radio");
            this.select76108mhz.checked = true;

        }

        apply(firmwareData) {
            const offset1 = 0xa29c;
            const offset2 = 0xa31c;
            const offset3 = 0x647a;
            const offset4 = 0x647e;
            if (this.select76108mhz.checked) {
                firmwareData = replaceSection(firmwareData, hexString("5f0a0000"), offset1);
                firmwareData = replaceSection(firmwareData, hexString("5f20c000"), offset2);

                firmwareData = replaceSection(firmwareData, hexString("5f20c000"), offset3);
                firmwareData = replaceSection(firmwareData, hexString("8721"), offset4);

                log(`Успешно применён: ${this.name}. 76-108МГц`);
            }
            else if (this.select64108mhz.checked) {
                firmwareData = replaceSection(firmwareData, hexString("5f0a0000"), offset1);
                firmwareData = replaceSection(firmwareData, hexString("5020c000"), offset3);

                log(`Успешно применён: ${this.name}. 64-108МГц`);
            }
            if (this.select6476mhz.checked) {
                firmwareData = replaceSection(firmwareData, hexString("df0a0000"), offset1);
                firmwareData = replaceSection(firmwareData, hexString("5020c000"), offset2);

                firmwareData = replaceSection(firmwareData, hexString("5020c000"), offset3);
                firmwareData = replaceSection(firmwareData, hexString("5f21"), offset4);

                log(`Успешно применён: ${this.name}. 64-76МГц`);
            }
            if (this.select87108mhz.checked) {
                firmwareData = replaceSection(firmwareData, hexString("5f0a0000"), offset1);
                firmwareData = replaceSection(firmwareData, hexString("6c20c000"), offset3);

                log(`Успешно применён: ${this.name}. 86.4-108МГц`);
            }
            else if (this.select88108mhz.checked) {
                firmwareData = replaceSection(firmwareData, hexString("5f0a0000"), offset1);
                firmwareData = replaceSection(firmwareData, hexString("6e20c000"), offset3);

                log(`Успешно применён: ${this.name}. 88-108МГц`);
            }

            return firmwareData;
        }
    }
    ,
    class Mod_AirCopy extends FirmwareMod {
        constructor() {
            super("Частота AIR COPY", "Изменяет частоту, на которой производится беспроводное копирование настроек из одной рации в другую. По умолчанию - 410,025 МГц. Для включения режима AIR COPY рацию необходимо включить, зажав F2 [Фонарик] + PTT.", 0);
            this.inputFreq1 = addInputField(this.modSpecificDiv, ["Частота Air Copy", "Гц"], "433600000");

        }

        apply(firmwareData) {
            const offset = 0x5590;
            const freq = Math.trunc(parseInt(this.inputFreq1.value) * 0.1);

            if ((freq >= 1800000) && (freq <= 130000000)) {
                // Create an 8-byte buffer with the specified values
                const buffer = new ArrayBuffer(4);
                const dataView = new DataView(buffer);

                dataView.setUint32(0, freq, true);

                // Convert the buffer to a Uint8Array
                const freqHex = new Uint8Array(buffer);

                // Replace the 8-byte section at the offset with the new buffer
                firmwareData = replaceSection(firmwareData, freqHex, offset);

                log(`Успешно применён: ${this.name}.`);
            }
            else {
                log(`Ошибка применения ${this.name}: Частота должна быть в диапазоне от 18 до 1300 МГц!`);
            }

            return firmwareData;
        }
    }
    ,
    class Mod_EnableSWDPort extends FirmwareMod {
        constructor() {
            super("Включить отладку по SWD", "Если вы не знаете, что такое SWD - вам оно не надо! Включает отладку по SWD. Вам будет нужно припать отладчик к контрольным точкам на плате.", 0);
            this.hidden = true;
        }

        apply(firmwareData) {
            const offset1 = 0xb94c;
            const offset2 = 0xb9da;
            const newData = hexString("00bf");
            firmwareData = replaceSection(firmwareData, newData, offset1);
            firmwareData = replaceSection(firmwareData, newData, offset2);
            log(`Успешно применён: ${this.name}.`);

            return firmwareData;
        }
    }
    ,
]
